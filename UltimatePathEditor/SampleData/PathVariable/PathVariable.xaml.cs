//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.PathVariable
{
	using System; 
	using System.ComponentModel;

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class PathVariable { }
#else

	public class PathVariable : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		public PathVariable()
		{
			try
			{
				Uri resourceUri = new Uri("/UltimatePathEditor;component/SampleData/PathVariable/PathVariable.xaml", UriKind.RelativeOrAbsolute);
				System.Windows.Application.LoadComponent(this, resourceUri);
			}
			catch
			{
			}
		}

		private PathValues _PathValues = new PathValues();

		public PathValues PathValues
		{
			get
			{
				return this._PathValues;
			}
		}
	}

	public class PathValuesItem : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Value = string.Empty;

		public string Value
		{
			get
			{
				return this._Value;
			}

			set
			{
				if (this._Value != value)
				{
					this._Value = value;
					this.OnPropertyChanged("Value");
				}
			}
		}

		private bool _IsValid = false;

		public bool IsValid
		{
			get
			{
				return this._IsValid;
			}

			set
			{
				if (this._IsValid != value)
				{
					this._IsValid = value;
					this.OnPropertyChanged("IsValid");
				}
			}
		}

		private bool _IsDragged = false;

		public bool IsDragged
		{
			get
			{
				return this._IsDragged;
			}

			set
			{
				if (this._IsDragged != value)
				{
					this._IsDragged = value;
					this.OnPropertyChanged("IsDragged");
				}
			}
		}

		private bool _IsDragOver = false;

		public bool IsDragOver
		{
			get
			{
				return this._IsDragOver;
			}

			set
			{
				if (this._IsDragOver != value)
				{
					this._IsDragOver = value;
					this.OnPropertyChanged("IsDragOver");
				}
			}
		}
	}

	public class PathValues : System.Collections.ObjectModel.ObservableCollection<PathValuesItem>
	{ 
	}
#endif
}
